{"version":3,"file":"static/js/724.acd4ad37.chunk.js","mappings":"kPAEaA,EAAUC,EAAAA,GAAAA,IAAH,2GAOPC,EAAcD,EAAAA,GAAAA,IAAH,6CAIXE,EAAQF,EAAAA,GAAAA,GAAH,yFAMLG,EAAOH,EAAAA,GAAAA,EAAH,+CAIJI,EAAWJ,EAAAA,GAAAA,KAAH,2C,SCiDrB,EA9DqB,SAAAK,GACnB,OAA4BC,EAAAA,EAAAA,WAAS,kBACnCC,KAAKC,MAAMC,aAAaC,QAAQ,UADG,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAIA,EAQIP,EAAMQ,cAPRC,EADF,EACEA,MACAC,EAFF,EAEEA,YACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,OACAC,EALF,EAKEA,SACAC,EANF,EAMEA,aACQC,EAPV,EAOET,QAGFU,EAAAA,EAAAA,YAAU,WACJV,IACJW,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJZ,EAAUY,EACX,IACAC,OACJ,GAAE,CAACd,IAUJ,OACEA,IACE,UAACZ,EAAD,YACE,gBACE2B,IAAG,yCAAoCX,GACvCY,IAAG,UAAKb,EAAL,WACHc,MAAM,SAGR,UAAC3B,EAAD,YACE,SAACC,EAAD,UAAQY,KACR,UAACX,EAAD,YACE,SAACC,EAAD,sBADF,IAnBe,WACrB,IAAMyB,EAAgBT,EAAWU,KAAI,qBAAGC,EAAH,IACrC,OAAOpB,EACJqB,QAAO,SAAAC,GAAK,OAAIJ,EAAcK,SAASD,EAAMF,GAAjC,IACZD,KAAI,SAAAG,GAAK,OAAIA,EAAME,IAAV,IACTC,KAAK,KACT,CAcuCC,OAEhC,UAAClC,EAAD,YACE,SAACC,EAAD,uBADF,IACiCY,MAEjC,UAACb,EAAD,YACE,SAACC,EAAD,sBADF,IACgCa,EADhC,SAGA,UAACd,EAAD,YACE,SAACC,EAAD,qBADF,IAC+Be,MAE/B,SAAChB,EAAD,UAAOe,SAKhB,C","sources":["components/FilmMainInfo/FilmMainInfo.styled.jsx","components/FilmMainInfo/FIlmMainInfo.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 50px;\n  justify-content: center;\n  margin: 0 0 30px 0;\n`;\n\nexport const TextWrapper = styled.div`\n  max-width: 400px;\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 20px 0;\n  text-align: center;\n  color: #8383fa;\n`;\n\nexport const Text = styled.p`\n  margin: 0 0 10px 0;\n`;\n\nexport const Property = styled.span`\n  color: #8383fa;\n`;\n","import { useEffect, useState } from 'react';\nimport { getGenres } from 'utils/getFunctions';\nimport {\n  Wrapper,\n  Title,\n  TextWrapper,\n  Text,\n  Property,\n} from './FilmMainInfo.styled';\n\nconst FilmMainInfo = props => {\n  const [genres, setGenres] = useState(() =>\n    JSON.parse(localStorage.getItem('genres'))\n  );\n\n  const {\n    title,\n    poster_path,\n    release_date,\n    budget,\n    overview,\n    vote_average,\n    genres: filmGenres,\n  } = props.moviedDetails;\n\n  useEffect(() => {\n    if (genres) return;\n    getGenres()\n      .then(data => {\n        setGenres(data);\n      })\n      .catch();\n  }, [genres]);\n\n  const generateGenres = () => {\n    const filmGenresIds = filmGenres.map(({ id }) => id);\n    return genres\n      .filter(genre => filmGenresIds.includes(genre.id))\n      .map(genre => genre.name)\n      .join(', ');\n  };\n\n  return (\n    genres && (\n      <Wrapper>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n          alt={`${title} poster`}\n          width=\"200\"\n        />\n\n        <TextWrapper>\n          <Title>{title}</Title>\n          <Text>\n            <Property>Genres:</Property> {generateGenres()}\n          </Text>\n          <Text>\n            <Property>Release:</Property> {release_date}\n          </Text>\n          <Text>\n            <Property>Budget:</Property> {budget} $\n          </Text>\n          <Text>\n            <Property>Votes:</Property> {vote_average}\n          </Text>\n          <Text>{overview}</Text>\n        </TextWrapper>\n      </Wrapper>\n    )\n  );\n};\n\nexport default FilmMainInfo;\n"],"names":["Wrapper","styled","TextWrapper","Title","Text","Property","props","useState","JSON","parse","localStorage","getItem","genres","setGenres","moviedDetails","title","poster_path","release_date","budget","overview","vote_average","filmGenres","useEffect","getGenres","then","data","catch","src","alt","width","filmGenresIds","map","id","filter","genre","includes","name","join","generateGenres"],"sourceRoot":""}